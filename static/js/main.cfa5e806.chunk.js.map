{"version":3,"sources":["actions.js","reducers/index.js","reducers/helloWorld.js","sagas.js","store.js","Home.js","serviceWorker.js","index.js","App.js"],"names":["REQUEST_HELLO_WORLD","requestHelloWorld","type","receiveHelloWorld","text","combineReducers","helloWorld","state","arguments","length","undefined","_ref","mySaga","action","regenerator_default","a","wrap","_context","prev","next","put","t0","stop","_marked","this","_context2","takeLatest","_marked2","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","run","Home","props","react_default","createElement","Component","connect","dispatch","bindActionCreators","Boolean","window","location","hostname","match","ReactDOM","render","es","store","src_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAAaA,EAAsB,sBAGtBC,EAAoB,iBAAO,CAAEC,KAAMF,IACnCG,EAAoB,SAAAC,GAAI,MAAK,CAAEF,KAHT,sBAGoCE,SCAxDC,cAAgB,CAC7BC,WCFa,WAAgC,IAA/BC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvB,GAAuBG,EAAAH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAjBR,EAAiBS,EAAjBT,KAAME,EAAWO,EAAXP,KAClC,OAAQF,GACN,IFJ+B,sBEK7B,OAAOE,EACT,QACE,OAAOG,yCCOHD,cAuBAM,GAvBV,SAAUN,EAAWO,GAArB,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFJF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEUC,YAAIjB,EAAkB,iCAFhC,OAAAc,EAAAE,KAAA,eAII,OAJJF,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,SAAAA,EAAAE,KAAA,EAIUC,YAAIjB,EAAkB,uCAJhC,wBAAAc,EAAAK,SAAAC,EAAAC,KAAA,SAuBA,SAAUZ,IAAV,OAAAE,EAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACE,OADFM,EAAAN,KAAA,EACQO,YAAW1B,EAAqBM,GADxC,wBAAAmB,EAAAH,SAAAK,EAAAH,MAIeZ,QCnCTgB,EAAiBC,cAERC,cAAYC,EAASC,YAAgBJ,IAGpDA,EAAeK,IAAIrB,+CCNbsB,8LAEFV,KAAKW,MAAMlC,qDAIX,OAAOmC,EAAArB,EAAAsB,cAAA,UAAKb,KAAKW,MAAM7B,mBANRgC,aAeJC,cALS,SAAAhC,GAAK,MAAK,CAAED,WAAYC,EAAMD,aAE3B,SAAAkC,GAAQ,OACjCC,YAAmB,CAAExC,qBAAqBuC,IAE7BD,CAGbL,GCZkBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOZ,EAAArB,EAAAsB,cCCD,kBACbD,EAAArB,EAAAsB,cAACY,EAAA,EAAD,CAAUC,MAAOA,GACfd,EAAArB,EAAAsB,cAACc,EAAD,QDHY,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cfa5e806.chunk.js","sourcesContent":["export const REQUEST_HELLO_WORLD = \"REQUEST_HELLO_WORLD\";\nexport const RECEIVE_HELLO_WORLD = \"RECEIVE_HELLO_WORLD\";\n\nexport const requestHelloWorld = () => ({ type: REQUEST_HELLO_WORLD });\nexport const receiveHelloWorld = text => ({ type: RECEIVE_HELLO_WORLD, text });\n","import { combineReducers } from \"redux\";\n\nimport helloWorld from \"./helloWorld\";\n\nexport default combineReducers({\n  helloWorld\n});\n","import { RECEIVE_HELLO_WORLD } from \"../actions\";\n\n// The reducers receive two parameters a state and an action\nexport default (state = \"\", { type, text }) => {\n  switch (type) {\n    case RECEIVE_HELLO_WORLD:\n      return text;\n    default:\n      return state;\n  }\n};\n","import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\n// import Api from '...'\n\nimport { REQUEST_HELLO_WORLD, receiveHelloWorld } from \"./actions\";\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n// function* fetchUser(action) {\n//    try {\n// Do API call here\n//       const user = yield call(Api.fetchUser, action.payload.userId);\n//       yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n//    } catch (e) {\n//       yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n//    }\n// }\nfunction* helloWorld(action) {\n  try {\n    yield put(receiveHelloWorld(\"Hello World from redux saga!\"));\n  } catch (e) {\n    yield put(receiveHelloWorld(\"Hello World ERROR from redux saga!\"));\n  }\n}\n\n/*\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  Allows concurrent fetches of user.\n*/\n// function* mySaga() {\n//   yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n// }\n\n/*\n  Alternatively you may use takeLatest.\n\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* mySaga() {\n  yield takeLatest(REQUEST_HELLO_WORLD, helloWorld);\n}\n\nexport default mySaga;\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer from \"./reducers\";\nimport mySaga from \"./sagas\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n// mount it on the Store\nexport default createStore(reducer, applyMiddleware(sagaMiddleware));\n\n// then run the saga\nsagaMiddleware.run(mySaga);\n\n// render the application\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { requestHelloWorld } from \"./actions\";\n\nclass Home extends Component {\n  componentDidMount() {\n    this.props.requestHelloWorld();\n  }\n\n  render() {\n    return <h1>{this.props.helloWorld}</h1>;\n  }\n}\n\nconst mapStateToProps = state => ({ helloWorld: state.helloWorld });\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ requestHelloWorld }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Home);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport Home from \"./Home\";\n\nexport default () => (\n  <Provider store={store}>\n    <Home />\n  </Provider>\n);\n"],"sourceRoot":""}