{"version":3,"sources":["actions.js","reducers/index.js","reducers/data.js","lib/api.js","sagas.js","store.js","config.js","Home.js","serviceWorker.js","index.js","App.js"],"names":["REQUEST_API_DATA","requestApiData","type","combineReducers","data","state","arguments","length","undefined","_ref","lib_api","fetchData","_callee","response","message","regenerator_default","a","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","t0","stop","this","getApiData","mySaga","action","call","api","put","console","log","_marked","_context2","takeLatest","_marked2","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","run","config","KEYS","KEY_ONE","KEY_TWO","Home","person","personData","react_default","createElement","key","id","value","name","first","last","gender","src","picture","medium","alt","props","_this$props$data$resu","results","map","Component","connect","dispatch","bindActionCreators","Boolean","window","location","hostname","match","ReactDOM","render","es","store","src_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77282157.chunk.js","sourcesContent":["export const REQUEST_API_DATA = \"REQUEST_API_DATA\";\nexport const RECEIVE_API_DATA = \"RECEIVE_API_DATA\";\n\nexport const requestApiData = () => ({ type: REQUEST_API_DATA });\nexport const receiveApiData = data => ({ type: RECEIVE_API_DATA, data });\n","import { combineReducers } from \"redux\";\n\nimport data from \"./data\";\n\nexport default combineReducers({\n  data\n});\n","import { RECEIVE_API_DATA } from \"../actions\";\n\n// The reducers receive two parameters a state and an action\nexport default (state = {}, { type, data }) => {\n  switch (type) {\n    case RECEIVE_API_DATA:\n      return data;\n    default:\n      return state;\n  }\n};\n","const BASE_URL = \"https://randomuser.me/api\";\n\nclass api {\n  fetchData = async () => {\n    try {\n      const response = await fetch(`${BASE_URL}`);\n      const data = await response.json();\n      return data;\n    } catch (e) {\n      let message = e;\n      return message;\n    }\n  };\n}\n\nexport default new api();\n","import { call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { REQUEST_API_DATA } from \"./actions\";\nimport api from \"./lib/api\";\n\n// Worker Saga: will be fired on RECEIVE_API_DATA actions\nfunction* getApiData(action) {\n  try {\n    // Do API call here\n    const data = yield call(api.fetchData);\n    yield put({ type: \"RECEIVE_API_DATA\", data: data });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Starts fetchUser on the latest dispatched `REQUEST_API_DATA` action.\nfunction* mySaga() {\n  yield takeLatest(REQUEST_API_DATA, getApiData);\n}\n\nexport default mySaga;\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer from \"./reducers\";\nimport mySaga from \"./sagas\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n// mount it on the Store\nexport default createStore(reducer, applyMiddleware(sagaMiddleware));\n\n// then run the saga\nsagaMiddleware.run(mySaga);\n\n// render the application\n","const config = {\n  KEYS: {\n    KEY_ONE: \"THIS_IS_A_KEY_TEST\",\n    KEY_TWO: \"THIS_IS_ANOTHER_TEST\"\n  }\n};\n\nexport default config;\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport { requestApiData } from \"./actions\";\nimport config from \"./config\";\n\nclass Home extends Component {\n  componentDidMount() {\n    this.props.requestApiData();\n  }\n\n  person = personData => (\n    <div key={personData.id.value}>\n      <h1>\n        {personData.name.first} {personData.name.last}\n      </h1>\n      <p>{personData.gender}</p>\n      <img\n        src={personData.picture.medium}\n        alt={`photography of ${personData.name.first}`}\n      />\n      <p>{config.KEYS.KEY_ONE}</p>\n    </div>\n  );\n\n  render() {\n    const { results = [] } = this.props.data;\n    return <h1>{results.map(this.person)}</h1>;\n  }\n}\n\nconst mapStateToProps = state => ({ data: state.data });\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ requestApiData }, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Home);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport Home from \"./Home\";\n\nexport default () => (\n  <Provider store={store}>\n    <Home />\n  </Provider>\n);\n"],"sourceRoot":""}